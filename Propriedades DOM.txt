Propriedade parentNode

A propriedade parentNode é utilizada para acessar o nó pai de um elemento no DOM. Por meio dela, podemos navegar pela árvore do DOM em direção ao nó pai do elemento atual.

Exemplo de uso:

Suponha que temos o seguinte código HTML:

    <div id="container">
    <p>Este é um parágrafo</p>
    </div>

Agora, podemos usar o ‘parentNode’ para acessar o elemento pai do parágrafo:

    const paragraph = document.querySelector('p');
    const parentElement = paragraph.parentNode;

    console.log(parentElement.id); // Saída: "container"

Propriedade childNodes

A propriedade childNodes é utilizada para acessar todos os nós filhos de um elemento no DOM. Ela retorna uma lista de nós, incluindo nós de texto e elementos HTML.

Exemplo de uso:

Considerando o mesmo HTML do exemplo anterior, podemos usar o childNodes para obter todos os nós filhos do elemento com o ID "container":

    const container = document.getElementById('container');
    const childNodes = container.childNodes;

    console.log(childNodes.length); // Saída: 1 (o nó de texto "\n  " é considerado um nó filho)
    console.log(childNodes[0].nodeName); // Saída: "#text"
    console.log(childNodes[1].nodeName); // Saída: "P"

Propriedade nextElementSibling

A propriedade nextElementSibling permite acessar o próximo irmão (nó adjacente) de um elemento no DOM.

Exemplo de uso:

Vamos considerar o seguinte HTML:

    <ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
    </ul>

Agora, podemos usar o nextElementSibling para acessar o próximo irmão de um elemento <li>:

    const item1 = document.querySelector('li:first-child');
    const item2 = item1.nextElementSibling;

    console.log(item2.textContent); // Saída: "Item 2"

Propriedade previousElementSibling

A propriedade previousElementSibling é semelhante ao nextElementSibling, mas permite acessar o irmão anterior (nó adjacente) de um elemento no DOM.

Exemplo de uso:

Continuando o exemplo anterior, vamos usar o previousElementSibling para acessar o irmão anterior do elemento <li> que selecionamos:

    const item3 = document.querySelector('li:last-child');
    const item2 = item3.previousElementSibling;

    console.log(item2.textContent); // Saída: "Item 2"

Com essas propriedades, é possível navegar, acessar e modificar elementos HTML em uma página da web, tornando a manipulação do DOM uma tarefa poderosa para pessoas desenvolvedoras web.

É importante continuar praticando e explorando o DOM para aprofundar seu conhecimento e habilidades em JavaScript.

Nesta aula, aprendemos como utilizar o objeto Date para formatar minutos e segundos. Entretanto, é possível utilizar suas propriedades e métodos para mais funcionalidades, como manipular e exibir datas e horas no seu código.

Vamos conferir mais formas de seu uso?

Para criar uma instância do objeto ‘Date’, você pode usar uma das várias formas de construção:
    
    . Construtor sem argumentos:
    
        const dataAtual = new Date();

    . Construtor com argumentos (ano, mês, dia, hora, minuto, segundo, milissegundo):
    
        const dataEspecifica = new Date(2023, 7, 3, 12, 30, 0, 0);

    . Construtor com uma string que representa a data (formato padrão é "yyyy-mm-dd"):

        const dateString = "2023-08-03";
        const formatoDeData = new Date(dateString);

    . Uma vez criado um objeto Date, você pode acessar informações específicas da data e hora, como o ano, mês, dia, hora, minuto e segundo usando os métodos de acesso do objeto:

        const currentDate = new Date();

        const ano = currentDate.getFullYear();  // Acessa o ano
        const mês = currentDate.getMonth(); // Acessa o mês - Janeiro é 0, Fevereiro é 1, ..., Dezembro é 11
        const dia = currentDate.getDate(); // Acessa o dia
        const horas = currentDate.getHours(); // Acessa as horas 
        const minutos = currentDate.getMinutes(); // Acessa os minutos
        const segundos = currentDate.getSeconds(); // Acessa os segundos
        const milissegundos = currentDate.getMilliseconds();  // Acessa os milissegundos 

    . Você também pode modificar a data e hora usando os métodos de definição:
    
        const data = new Date();

        data.setFullYear(2024);  // Define o ano
        data.setMonth(10); // Define o mês
        data.setDate(25); // Define o dia
        data.setHours(10);  // Define as horas
        data.setMinutes(30); // Define os minutos
        data.setSeconds(0); // Define os segundos

Além disso, o objeto ‘Date’ também fornece vários métodos para trabalhar com datas, como comparar datas, adicionar ou subtrair períodos de tempo, obter o dia da semana, entre outros.

Lembre-se de que, dependendo do fuso horário e configurações regionais do sistema em que o código está sendo executado, os resultados podem variar. Se você precisar de mais funcionalidades e suportes a diferentes formatos de zonas de tempo, uma boa alternativa é o uso de bibliotecas de manipulação de datas, como o Moment.js ou o date-fns.